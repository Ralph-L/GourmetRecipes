package com.ralph.GourmetRecipes.Machines.MixingBowl;

import org.lwjgl.opengl.GL11;

import net.minecraft.block.Block;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.RenderBlocks;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.IBlockAccess;
import net.minecraftforge.common.util.ForgeDirection;
import cpw.mods.fml.client.registry.ISimpleBlockRenderingHandler;

public class MixingBowlRenderer implements ISimpleBlockRenderingHandler {

	private final ModelBase model = new ModelBase() {
	};
	private final ModelRenderer bowl;
	private final ModelRenderer motor;

	private ResourceLocation[] textures;
	private static final float[] angleMap = new float[6];

	static {
		angleMap[ForgeDirection.EAST.ordinal()] = (float) -Math.PI / 2;
		angleMap[ForgeDirection.WEST.ordinal()] = (float) Math.PI / 2;
		angleMap[ForgeDirection.UP.ordinal()] = 0;
		angleMap[ForgeDirection.DOWN.ordinal()] = (float) Math.PI;
		angleMap[ForgeDirection.SOUTH.ordinal()] = (float) Math.PI / 2;
		angleMap[ForgeDirection.NORTH.ordinal()] = (float) -Math.PI / 2;
	}

	public MixingBowlRenderer() {
		System.out.println("Called");
		bowl = new ModelRenderer(model, 0, 0);
		bowl.addBox(-8F, -8F, -8F, 16, 6, 16);
		bowl.rotationPointX = 8;
		bowl.rotationPointY = 8;
		bowl.rotationPointZ = 8;

		motor = new ModelRenderer(model, 0, 0);
		motor.addBox(-4F, -4F, -4F, 8, 12, 8);
		motor.rotationPointX = 8F;
		motor.rotationPointY = 8F;
		motor.rotationPointZ = 8F;
		/*
	}

	public MixingBowlRenderer(String baseTexture) {
		this();
		*/
		String baseTexture = "gourmetrecipes:textures/blocks/";
		//		final ResourceLocation texture = new ResourceLocation("gourmetrecipes:textures/gui/mixingbowlgui.png");
		textures = new ResourceLocation[] {
				new ResourceLocation(baseTexture + "bowl.png"),
				new ResourceLocation(baseTexture + "motor.png"), };
	}


	@Override
	public void renderInventoryBlock(Block block, int metadata, int modelId,
			RenderBlocks renderer) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean renderWorldBlock(IBlockAccess world, int x, int y, int z,
			Block block, int modelId, RenderBlocks renderer) {
		// TODO Auto-generated method stub
//		return false;
		render(1, null, 0, 0, 0);
		return true;
	}

	@Override
	public boolean shouldRender3DInInventory(int modelId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int getRenderId() {
		// TODO Auto-generated method stub
		return MixingBowl.getRenderId();
	}

	private void render(float progress, ForgeDirection orientation, double x, double y, double z) {
		
		System.out.println("Trying to render mixing bowl");

		GL11.glPushMatrix();
		GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
		GL11.glEnable(GL11.GL_LIGHTING);
		GL11.glDisable(GL11.GL_BLEND);
		GL11.glEnable(GL11.GL_CULL_FACE);
		GL11.glColor3f(1, 1, 1);

		GL11.glTranslatef((float) x, (float) y, (float) z);

		float step;

		if (progress > 0.5)
			step = 5.99F - (progress - 0.5F) * 2F * 5.99F;
		else
			step = progress * 2F * 5.99F;

		float tfactor = step / 16;

		float[] angle = { 0, 0, 0 };
		float[] translate = { orientation.offsetX, orientation.offsetY, orientation.offsetZ };

		switch (orientation) {
		case EAST:
		case WEST:
		case DOWN:
			angle[2] = angleMap[orientation.ordinal()];
			break;
		case SOUTH:
		case NORTH:
		default:
			angle[0] = angleMap[orientation.ordinal()];
			break;
		}

		bowl.rotateAngleX = angle[0];
		bowl.rotateAngleY = angle[1];
		bowl.rotateAngleZ = angle[2];

		motor.rotateAngleX = angle[0];
		motor.rotateAngleY = angle[1];
		motor.rotateAngleZ = angle[2];

		float factor = (float) (1.0 / 16.0);

//		Proxies.common.bindTexture(textures[Textures.BASE.ordinal()]);
		bowl.render(factor);

//		Proxies.common.bindTexture(textures[Textures.PISTON.ordinal()]);
		GL11.glTranslatef(translate[0] * tfactor, translate[1] * tfactor, translate[2] * tfactor);
		motor.render(factor);
		GL11.glTranslatef(-translate[0] * tfactor, -translate[1] * tfactor, -translate[2] * tfactor);

		ResourceLocation texture;

	}
}
	/* 
	 * 

	private static enum Textures {

		BASE, PISTON, EXTENSION, TRUNK_HIGHEST, TRUNK_HIGHER, TRUNK_HIGH, TRUNK_MEDIUM, TRUNK_LOW
	}



	@Override
	public void inventoryRender(double x, double y, double z, float f, float f1) {
		render(TemperatureState.COOL, 0.25F, ForgeDirection.UP, x, y, z);
	}

	@Override
	public void renderTileEntityAt(TileEntity tile, double d, double d1, double d2, float f) {

		Engine engine = (Engine) tile;

		if (engine != null)
			render(engine.getTemperatureState(), engine.progress, engine.getOrientation(), d, d1, d2);
	}

	private void render(TemperatureState state, float progress, ForgeDirection orientation, double x, double y, double z) {

		GL11.glPushMatrix();
		GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
		GL11.glEnable(GL11.GL_LIGHTING);
		GL11.glDisable(GL11.GL_BLEND);
		GL11.glEnable(GL11.GL_CULL_FACE);
		GL11.glColor3f(1, 1, 1);

		GL11.glTranslatef((float) x, (float) y, (float) z);

		float step;

		if (progress > 0.5)
			step = 5.99F - (progress - 0.5F) * 2F * 5.99F;
		else
			step = progress * 2F * 5.99F;

		float tfactor = step / 16;

		float[] angle = { 0, 0, 0 };
		float[] translate = { orientation.offsetX, orientation.offsetY, orientation.offsetZ };

		switch (orientation) {
		case EAST:
		case WEST:
		case DOWN:
			angle[2] = angleMap[orientation.ordinal()];
			break;
		case SOUTH:
		case NORTH:
		default:
			angle[0] = angleMap[orientation.ordinal()];
			break;
		}

		boiler.rotateAngleX = angle[0];
		boiler.rotateAngleY = angle[1];
		boiler.rotateAngleZ = angle[2];

		trunk.rotateAngleX = angle[0];
		trunk.rotateAngleY = angle[1];
		trunk.rotateAngleZ = angle[2];

		piston.rotateAngleX = angle[0];
		piston.rotateAngleY = angle[1];
		piston.rotateAngleZ = angle[2];

		extension.rotateAngleX = angle[0];
		extension.rotateAngleY = angle[1];
		extension.rotateAngleZ = angle[2];

		float factor = (float) (1.0 / 16.0);

		Proxies.common.bindTexture(textures[Textures.BASE.ordinal()]);
		boiler.render(factor);

		Proxies.common.bindTexture(textures[Textures.PISTON.ordinal()]);
		GL11.glTranslatef(translate[0] * tfactor, translate[1] * tfactor, translate[2] * tfactor);
		piston.render(factor);
		GL11.glTranslatef(-translate[0] * tfactor, -translate[1] * tfactor, -translate[2] * tfactor);

		ResourceLocation texture;

		switch (state) {
		case OVERHEATING:
			texture = textures[Textures.TRUNK_HIGHEST.ordinal()];
			break;
		case RUNNING_HOT:
			texture = textures[Textures.TRUNK_HIGHER.ordinal()];
			break;
		case OPERATING_TEMPERATURE:
			texture = textures[Textures.TRUNK_HIGH.ordinal()];
			break;
		case WARMED_UP:
			texture = textures[Textures.TRUNK_MEDIUM.ordinal()];
			break;
		case COOL:
		default:
			texture = textures[Textures.TRUNK_LOW.ordinal()];
			break;

		}
		Proxies.common.bindTexture(texture);
		trunk.render(factor);

		Proxies.common.bindTexture(textures[Textures.EXTENSION.ordinal()]);
		float chamberf = 2F / 16F;

		for (int i = 0; i <= step + 2; i += 2) {
			extension.render(factor);
			GL11.glTranslatef(translate[0] * chamberf, translate[1] * chamberf, translate[2] * chamberf);
		}

		GL11.glPopAttrib();
		GL11.glPopMatrix();
	}


	 * 
	 * */




